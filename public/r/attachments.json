{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "attachments",
  "type": "registry:ui",
  "dependencies": [
    "react-dropzone"
  ],
  "registryDependencies": [
    "button",
    "carousel",
    "tooltip",
    "input",
    "progress"
  ],
  "files": [
    {
      "path": "registry/aoian-ui/attachments/attachments.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport Image from \"next/image\"\nimport { Info, LoaderPinwheel, Upload, X } from \"lucide-react\"\nimport Dropzone, {\n  type DropzoneProps,\n  type FileRejection,\n} from \"react-dropzone\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Carousel,\n  CarouselContent,\n  CarouselNext,\n  CarouselPrevious,\n  type CarouselApi,\n} from \"@/components/ui/carousel\"\nimport { Progress } from \"@/components/ui/progress\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\nimport { DropArea } from \"@/components/aoian-ui/attachments/drop-area\"\nimport {\n  AudioIcon,\n  ExcelIcon,\n  ImageIcon,\n  MarkdownIcon,\n  PdfIcon,\n  PptIcon,\n  TextIcon,\n  VideoIcon,\n  WordIcon,\n  ZipIcon,\n} from \"@/components/aoian-ui/attachments/icons\"\nimport { SilentUploader } from \"@/components/aoian-ui/attachments/silent-uploader\"\nimport { Lightbox, LightboxItem } from \"@/components/aoian-ui/lightbox/lightbox\"\nimport { cn, formatBytes } from \"@/registry/lib/utils\"\n\ninterface AttachmentsProps extends React.HTMLAttributes<HTMLDivElement> {\n  accept?: DropzoneProps[\"accept\"]\n  maxSize?: DropzoneProps[\"maxSize\"]\n  maxFileCount?: DropzoneProps[\"maxFiles\"]\n  multiple?: boolean\n  disabled?: boolean\n  fullScreenDrop?: boolean\n  onFileChange?: (acceptedFiles: File[], rejectedFiles: FileRejection[]) => void\n}\n\nfunction Attachments({\n  onFileChange,\n  accept = {\n    \"image/*\": [],\n  },\n  maxSize = 1024 * 1024 * 2,\n  maxFileCount = 1,\n  multiple = false,\n  disabled = false,\n  fullScreenDrop,\n  className,\n  ...dropzoneProps\n}: AttachmentsProps) {\n  const onDrop = (acceptedFiles: File[], rejectedFiles: FileRejection[]) => {\n    onFileChange?.(acceptedFiles, rejectedFiles)\n  }\n  return (\n    <>\n      <SilentUploader\n        onDrop={onDrop}\n        accept={accept}\n        maxSize={maxSize}\n        maxFiles={maxFileCount}\n        multiple={maxFileCount > 1 || multiple}\n        disabled={disabled}\n      />\n      {fullScreenDrop && (\n        <DropArea getDropContainer={() => document.body}>\n          <div className=\"h-full w-full backdrop-blur\">\n            <Dropzone\n              onDrop={onDrop}\n              accept={accept}\n              maxSize={maxSize}\n              maxFiles={maxFileCount}\n              multiple={maxFileCount > 1 || multiple}\n              disabled={disabled}\n            >\n              {({ getRootProps, getInputProps, isDragActive }) => (\n                <div\n                  {...getRootProps()}\n                  className={cn(\n                    \"group relative grid h-full w-full cursor-pointer place-items-center rounded-lg border-2 border-dashed border-primary/25 px-5 py-2.5 text-center transition hover:bg-muted/25\",\n                    \"ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n                    isDragActive && \"border-primary/50\",\n                    disabled && \"pointer-events-none opacity-60\",\n                    className\n                  )}\n                  {...dropzoneProps}\n                >\n                  <input {...getInputProps()} />\n                  {isDragActive && (\n                    <div className=\"flex flex-col items-center justify-center gap-4 sm:px-5\">\n                      <div className=\"rounded-full border border-dashed p-3\">\n                        <Upload\n                          className=\"size-7 text-muted-foreground\"\n                          aria-hidden=\"true\"\n                        />\n                      </div>\n                      <h2 className=\"font-medium text-accent-foreground\">\n                        Drag & Drop files here\n                      </h2>\n                      <p className=\"font-medium text-muted-foreground\">\n                        Support file type: image, video, audio, document, etc.\n                      </p>\n                    </div>\n                  )}\n                </div>\n              )}\n            </Dropzone>\n          </div>\n        </DropArea>\n      )}\n    </>\n  )\n}\n\n// FileCard\n\ntype FileCardItem = {\n  uid?: string\n  name: string\n  size: number\n  percent: number\n  url?: string\n  message?: string\n  contentType?: string\n  status: \"error\" | \"done\" | \"uploading\" | \"removed\"\n}\n\nconst IMG_EXTS = [\"png\", \"jpg\", \"jpeg\", \"gif\", \"bmp\", \"webp\", \"svg\"]\n\nconst PRESET_FILE_ICONS: {\n  ext: string[]\n  icon: React.ReactElement\n}[] = [\n  {\n    icon: <ExcelIcon />,\n    ext: [\"xlsx\", \"xls\"],\n  },\n  {\n    icon: <ImageIcon />,\n    ext: IMG_EXTS,\n  },\n  {\n    icon: <MarkdownIcon />,\n    ext: [\"md\", \"mdx\"],\n  },\n  {\n    icon: <PdfIcon />,\n    ext: [\"pdf\"],\n  },\n  {\n    icon: <PptIcon />,\n    ext: [\"ppt\", \"pptx\"],\n  },\n  {\n    icon: <WordIcon />,\n    ext: [\"doc\", \"docx\"],\n  },\n  {\n    icon: <ZipIcon />,\n    ext: [\"zip\", \"rar\", \"7z\", \"tar\", \"gz\"],\n  },\n  {\n    icon: <VideoIcon />,\n    ext: [\"mp4\", \"avi\", \"mov\", \"wmv\", \"flv\", \"mkv\"],\n  },\n  {\n    icon: <AudioIcon />,\n    ext: [\"mp3\", \"wav\", \"flac\", \"ape\", \"aac\", \"ogg\"],\n  },\n]\n\nfunction matchExt(suffix: string, ext: string[]) {\n  return ext.some((e) => suffix.toLowerCase() === `.${e}`)\n}\n\nfunction FileCard({\n  className,\n  item,\n  mode = \"file\",\n  onDelete,\n}: React.HTMLAttributes<HTMLDivElement> & {\n  item: FileCardItem\n  mode?: \"image\" | \"file\"\n  onDelete?: (uid?: string) => void\n}) {\n  const { name, size, percent, status } = item\n\n  // ============================== Name ==============================\n  const [namePrefix, nameSuffix] = React.useMemo(() => {\n    const nameStr = name || \"\"\n    const match = nameStr.match(/^(.*)\\.[^.]+$/)\n    return match ? [match[1], nameStr.slice(match[1].length)] : [nameStr, \"\"]\n  }, [name])\n\n  const isImg = React.useMemo(\n    () => matchExt(nameSuffix, IMG_EXTS),\n    [nameSuffix]\n  )\n\n  const [icon] = React.useMemo(() => {\n    for (const { ext, icon } of PRESET_FILE_ICONS) {\n      if (matchExt(nameSuffix, ext)) {\n        return [icon]\n      }\n    }\n    return [<TextIcon key=\"defaultIcon\" />]\n  }, [nameSuffix])\n\n  if (mode === \"image\" && isImg && item.url) {\n    return (\n      <div className=\"group relative\">\n        <Image\n          src={item.url}\n          alt={item.name}\n          width={48}\n          height={48}\n          loading=\"lazy\"\n          className=\"aspect-square shrink-0 rounded-lg object-cover\"\n        />\n        {status === \"uploading\" && (\n          <div className=\"absolute inset-0 flex items-center justify-center rounded-lg bg-black/50\">\n            <LoaderPinwheel className=\"size-4 animate-spin text-white\" />\n          </div>\n        )}\n        {status === \"error\" && (\n          <div className=\"absolute inset-0 flex items-center justify-center rounded-lg bg-black/50\">\n            <TooltipProvider>\n              <Tooltip>\n                <TooltipTrigger>\n                  <Info className=\"size-4 text-destructive\" />\n                </TooltipTrigger>\n                <TooltipContent>\n                  <p>{item?.message ?? \"Upload failed\"}</p>\n                </TooltipContent>\n              </Tooltip>\n            </TooltipProvider>\n          </div>\n        )}\n        {status !== \"uploading\" && (\n          <Button\n            onClick={(e) => {\n              e.stopPropagation()\n              onDelete?.(item?.uid)\n            }}\n            className=\"absolute -right-2 -top-2 z-20 flex size-4 cursor-pointer items-center justify-center rounded-full bg-foreground px-0 py-0 text-background opacity-0 shadow-md group-hover:opacity-100 [&_svg]:size-3\"\n          >\n            <X />\n          </Button>\n        )}\n      </div>\n    )\n  }\n\n  return (\n    <div\n      className={cn(\n        \"group relative flex h-[52px] w-[200px] min-w-[200px] items-center gap-1 rounded-xl bg-background p-2\",\n        className\n      )}\n    >\n      {status !== \"uploading\" && (\n        <Button\n          onClick={(e) => {\n            e.stopPropagation()\n            onDelete?.(item?.uid)\n          }}\n          className=\"absolute right-1 top-1 z-20 flex size-4 cursor-pointer items-center justify-center rounded-full bg-foreground px-0 py-0 text-background opacity-0 shadow-md group-hover:opacity-100 [&_svg]:size-3\"\n        >\n          <X />\n        </Button>\n      )}\n      <span\n        className={cn(\n          \"flex items-center justify-center [&>svg]:size-8\",\n          status === \"uploading\" && \"grayscale\"\n        )}\n      >\n        {icon}\n      </span>\n      <div className=\"inline-flex w-full flex-col truncate pr-1.5\">\n        <span className=\"min-w-0 truncate text-sm\">{name}</span>\n        {status === \"uploading\" && (\n          <Progress className={\"mb-2 mt-1 h-[3px]\"} value={percent as number} />\n        )}\n        {status === \"error\" && (\n          <div className=\"inline-flex items-center gap-1\">\n            <Info className={\"size-3 text-destructive\"} />\n            <p className=\"text-xs text-destructive\">\n              {item?.message ?? \"Upload failed\"}\n            </p>\n          </div>\n        )}\n        {status === \"done\" && (\n          <p className=\"text-xs text-muted-foreground\">{formatBytes(size)}</p>\n        )}\n      </div>\n    </div>\n  )\n}\n\nfunction FileListBox({\n  items,\n  mode = \"file\",\n  className,\n  onDelete,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement> & {\n  items: FileCardItem[]\n  mode?: \"image\" | \"file\"\n  onDelete?: (uid?: string) => void\n}) {\n  const [api, setApi] = React.useState<CarouselApi>()\n  const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n  const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n  const onSelect = React.useCallback((api: CarouselApi) => {\n    if (!api) {\n      return\n    }\n\n    setCanScrollPrev(api.canScrollPrev())\n    setCanScrollNext(api.canScrollNext())\n  }, [])\n\n  React.useEffect(() => {\n    if (!api) {\n      return\n    }\n\n    onSelect(api)\n    api.on(\"reInit\", onSelect)\n    api.on(\"select\", onSelect)\n\n    return () => {\n      api?.off(\"select\", onSelect)\n    }\n  }, [api, onSelect])\n  const elementSize = 400\n  return (\n    <div className={cn(\"w-full\", className)} {...props}>\n      <Carousel\n        setApi={setApi}\n        opts={{\n          align: \"start\",\n        }}\n        className={cn(\n          \"w-full [&>div]:overflow-visible\",\n          canScrollPrev &&\n            \"[mask-image:linear-gradient(to_right,transparent,white_8%)]\",\n          canScrollNext &&\n            \"[mask-image:linear-gradient(to_right,white_92%,transparent)]\",\n          canScrollPrev &&\n            canScrollNext &&\n            \"[mask-image:linear-gradient(to_right,transparent,white_8%,white_92%,transparent)]\"\n        )}\n      >\n        {mode === \"image\" ? (\n          <Lightbox>\n            <CarouselContent className=\"ml-0 space-x-2\">\n              {items.map((item, index) =>\n                item.status === \"done\" ? (\n                  <LightboxItem key={index} src={item.url}>\n                    <div>\n                      <FileCard\n                        mode={mode}\n                        onDelete={onDelete}\n                        key={index}\n                        item={item}\n                      />\n                    </div>\n                  </LightboxItem>\n                ) : (\n                  <FileCard\n                    mode={mode}\n                    onDelete={onDelete}\n                    key={index}\n                    item={item}\n                  />\n                )\n              )}\n            </CarouselContent>\n          </Lightbox>\n        ) : (\n          <CarouselContent className=\"ml-0 space-x-2\">\n            {items.map((item, index) => (\n              <FileCard\n                mode={mode}\n                onDelete={onDelete}\n                key={index}\n                item={item}\n              />\n            ))}\n          </CarouselContent>\n        )}\n        {canScrollPrev && (\n          <CarouselPrevious className=\"left-2 size-6 rounded-lg\" />\n        )}\n        {canScrollNext && (\n          <CarouselNext className=\"right-2 size-6 rounded-lg\" />\n        )}\n      </Carousel>\n    </div>\n  )\n}\n\nexport {\n  Attachments,\n  FileListBox,\n  FileCard,\n  type AttachmentsProps,\n  type FileCardItem,\n}\n",
      "type": "registry:ui",
      "target": "components/aoian-ui/attachments.tsx"
    }
  ]
}