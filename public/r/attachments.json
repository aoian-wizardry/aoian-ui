{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "attachments",
  "type": "registry:ui",
  "dependencies": [
    "react-dropzone"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "registry/aoian-ui/attachments/attachments.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Upload } from \"lucide-react\"\nimport Dropzone, {\n  type DropzoneProps,\n  type FileRejection,\n} from \"react-dropzone\"\nimport { toast } from \"sonner\"\n\nimport {\n  Carousel,\n  CarouselContent,\n  CarouselNext,\n  CarouselPrevious,\n  type CarouselApi,\n} from \"@/components/ui/carousel\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { DropArea } from \"@/components/aoian-ui/attachments/drop-area\"\nimport {\n  AudioIcon,\n  ExcelIcon,\n  ImageIcon,\n  MarkdownIcon,\n  PdfIcon,\n  PptIcon,\n  TextIcon,\n  VideoIcon,\n  WordIcon,\n  ZipIcon,\n} from \"@/components/aoian-ui/attachments/icons\"\nimport { SilentUploader } from \"@/components/aoian-ui/attachments/silent-uploader\"\nimport { useControllableState } from \"@/components/aoian-ui/hooks/use-controllable-state\"\nimport { cn, formatBytes } from \"@/registry/lib/utils\"\n\ninterface AttachmentsProps extends React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * Value of the uploader.\n   * @type File[]\n   * @default undefined\n   * @example value={files}\n   */\n  value?: File[]\n\n  /**\n   * Function to be called when the value changes.\n   * @type (files: File[]) => void\n   * @default undefined\n   * @example onValueChange={(files) => setFiles(files)}\n   */\n  onValueChange?: (files: File[]) => void\n\n  /**\n   * Function to be called when files are uploaded.\n   * @type (files: File[]) => Promise<void>\n   * @default undefined\n   * @example onUpload={(files) => uploadFiles(files)}\n   */\n  onUpload?: (files: File[]) => Promise<void>\n\n  /**\n   * Accepted file types for the uploader.\n   * @type { [key: string]: string[]}\n   * @default\n   * ```ts\n   * { \"image/*\": [] }\n   * ```\n   * @example accept={[\"image/png\", \"image/jpeg\"]}\n   */\n  accept?: DropzoneProps[\"accept\"]\n\n  /**\n   * Maximum file size for the uploader.\n   * @type number | undefined\n   * @default 1024 * 1024 * 2 // 2MB\n   * @example maxSize={1024 * 1024 * 2} // 2MB\n   */\n  maxSize?: DropzoneProps[\"maxSize\"]\n\n  /**\n   * Maximum number of files for the uploader.\n   * @type number | undefined\n   * @default 1\n   * @example maxFileCount={4}\n   */\n  maxFileCount?: DropzoneProps[\"maxFiles\"]\n\n  /**\n   * Whether the uploader should accept multiple files.\n   * @type boolean\n   * @default false\n   * @example multiple\n   */\n  multiple?: boolean\n\n  /**\n   * Whether the uploader is disabled.\n   * @type boolean\n   * @default false\n   * @example disabled\n   */\n  disabled?: boolean\n  /**\n   * Whether to enable full-screen dragging\n   * @type boolean\n   * @default false\n   * @example disabled\n   */\n  fullScreenDrop?: boolean\n}\n\nfunction Attachments({\n  value: valueProp,\n  onValueChange,\n  onUpload,\n  accept = {\n    \"image/*\": [],\n  },\n  maxSize = 1024 * 1024 * 2,\n  maxFileCount = 1,\n  multiple = false,\n  disabled = false,\n  fullScreenDrop,\n  className,\n  ...dropzoneProps\n}: AttachmentsProps) {\n  const [files, setFiles] = useControllableState({\n    prop: valueProp,\n    onChange: onValueChange,\n  })\n\n  const onDrop = React.useCallback(\n    (acceptedFiles: File[], rejectedFiles: FileRejection[]) => {\n      if (!multiple && maxFileCount === 1 && acceptedFiles.length > 1) {\n        toast.error(\"Cannot upload more than 1 file at a time\")\n        return\n      }\n\n      if ((files?.length ?? 0) + acceptedFiles.length > maxFileCount) {\n        toast.error(`Cannot upload more than ${maxFileCount} files`)\n        return\n      }\n\n      const newFiles = acceptedFiles.map((file) =>\n        Object.assign(file, {\n          preview: URL.createObjectURL(file),\n        })\n      )\n\n      const updatedFiles = files ? [...files, ...newFiles] : newFiles\n\n      setFiles(updatedFiles)\n\n      if (rejectedFiles.length > 0) {\n        rejectedFiles.forEach(({ file }) => {\n          toast.error(`File ${file.name} was rejected`)\n        })\n      }\n\n      if (\n        onUpload &&\n        updatedFiles.length > 0 &&\n        updatedFiles.length <= maxFileCount\n      ) {\n        const target =\n          updatedFiles.length > 0 ? `${updatedFiles.length} files` : `file`\n\n        toast.promise(onUpload(updatedFiles), {\n          loading: `Uploading ${target}...`,\n          success: () => {\n            setFiles([])\n            return `${target} uploaded`\n          },\n          error: `Failed to upload ${target}`,\n        })\n      }\n    },\n\n    [files, maxFileCount, multiple, onUpload, setFiles]\n  )\n\n  function onRemove(index: number) {\n    if (!files) return\n    const newFiles = files.filter((_, i) => i !== index)\n    setFiles(newFiles)\n    onValueChange?.(newFiles)\n  }\n\n  // Revoke preview url when component unmounts\n  React.useEffect(() => {\n    return () => {\n      if (!files) return\n      files.forEach((file) => {\n        if (isFileWithPreview(file)) {\n          URL.revokeObjectURL(file.preview)\n        }\n      })\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const isDisabled = disabled || (files?.length ?? 0) >= maxFileCount\n\n  return (\n    <>\n      <SilentUploader\n        onDrop={onDrop}\n        accept={accept}\n        maxSize={maxSize}\n        maxFiles={maxFileCount}\n        multiple={maxFileCount > 1 || multiple}\n        disabled={isDisabled}\n      />\n      {fullScreenDrop && (\n        <DropArea getDropContainer={() => document.body}>\n          <div className=\"h-full w-full backdrop-blur\">\n            <Dropzone\n              onDrop={onDrop}\n              accept={accept}\n              maxSize={maxSize}\n              maxFiles={maxFileCount}\n              multiple={maxFileCount > 1 || multiple}\n              disabled={isDisabled}\n            >\n              {({ getRootProps, getInputProps, isDragActive }) => (\n                <div\n                  {...getRootProps()}\n                  className={cn(\n                    \"group relative grid h-full w-full cursor-pointer place-items-center rounded-lg border-2 border-dashed border-primary/25 px-5 py-2.5 text-center transition hover:bg-muted/25\",\n                    \"ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n                    isDragActive && \"border-primary/50\",\n                    isDisabled && \"pointer-events-none opacity-60\",\n                    className\n                  )}\n                  {...dropzoneProps}\n                >\n                  <input {...getInputProps()} />\n                  {isDragActive && (\n                    <div className=\"flex flex-col items-center justify-center gap-4 sm:px-5\">\n                      <div className=\"rounded-full border border-dashed p-3\">\n                        <Upload\n                          className=\"size-7 text-muted-foreground\"\n                          aria-hidden=\"true\"\n                        />\n                      </div>\n                      <h2 className=\"font-medium text-accent-foreground\">\n                        Drag & Drop files here\n                      </h2>\n                      <p className=\"font-medium text-muted-foreground\">\n                        Support file type: image, video, audio, document, etc.\n                      </p>\n                    </div>\n                  )}\n                </div>\n              )}\n            </Dropzone>\n          </div>\n        </DropArea>\n      )}\n    </>\n  )\n}\n\nfunction isFileWithPreview(file: File): file is File & { preview: string } {\n  return \"preview\" in file && typeof file.preview === \"string\"\n}\n\n// FileCard\nconst IMG_EXTS = [\"png\", \"jpg\", \"jpeg\", \"gif\", \"bmp\", \"webp\", \"svg\"]\n\nconst PRESET_FILE_ICONS: {\n  ext: string[]\n  icon: React.ReactElement\n}[] = [\n  {\n    icon: <ExcelIcon />,\n    ext: [\"xlsx\", \"xls\"],\n  },\n  {\n    icon: <ImageIcon />,\n    ext: IMG_EXTS,\n  },\n  {\n    icon: <MarkdownIcon />,\n    ext: [\"md\", \"mdx\"],\n  },\n  {\n    icon: <PdfIcon />,\n    ext: [\"pdf\"],\n  },\n  {\n    icon: <PptIcon />,\n    ext: [\"ppt\", \"pptx\"],\n  },\n  {\n    icon: <WordIcon />,\n    ext: [\"doc\", \"docx\"],\n  },\n  {\n    icon: <ZipIcon />,\n    ext: [\"zip\", \"rar\", \"7z\", \"tar\", \"gz\"],\n  },\n  {\n    icon: <VideoIcon />,\n    ext: [\"mp4\", \"avi\", \"mov\", \"wmv\", \"flv\", \"mkv\"],\n  },\n  {\n    icon: <AudioIcon />,\n    ext: [\"mp3\", \"wav\", \"flac\", \"ape\", \"aac\", \"ogg\"],\n  },\n]\n\nfunction matchExt(suffix: string, ext: string[]) {\n  return ext.some((e) => suffix.toLowerCase() === `.${e}`)\n}\n\nfunction FileCard({\n  className,\n  item,\n}: React.HTMLAttributes<HTMLDivElement> & {\n  item: { name: string; size: number; progress: number | boolean }\n}) {\n  const { name, size, progress } = item\n\n  // ============================== Name ==============================\n  const [namePrefix, nameSuffix] = React.useMemo(() => {\n    const nameStr = name || \"\"\n    const match = nameStr.match(/^(.*)\\.[^.]+$/)\n    return match ? [match[1], nameStr.slice(match[1].length)] : [nameStr, \"\"]\n  }, [name])\n\n  const isShowProgress = React.useMemo(\n    () => typeof item.progress === \"number\",\n    [item.progress]\n  )\n\n  const isImg = React.useMemo(\n    () => matchExt(nameSuffix, IMG_EXTS),\n    [nameSuffix]\n  )\n\n  const [icon] = React.useMemo(() => {\n    for (const { ext, icon } of PRESET_FILE_ICONS) {\n      if (matchExt(nameSuffix, ext)) {\n        return [icon]\n      }\n    }\n    return [<TextIcon key=\"defaultIcon\" />]\n  }, [nameSuffix])\n\n  return (\n    <div\n      className={cn(\n        \"flex min-w-[180px] items-center rounded-xl bg-background p-2\",\n        className\n      )}\n    >\n      <span className=\"flex items-center justify-center [&>svg]:size-8\">\n        {icon}\n      </span>\n      <div className=\"mt-[2px] w-full pr-1.5\">\n        <h4 className=\"text-sm\">{name}</h4>\n        {isShowProgress ? (\n          <Progress className={\"mt-1 h-[3px]\"} value={progress as number} />\n        ) : (\n          <p className=\"text-xs text-muted-foreground\">{formatBytes(size)}</p>\n        )}\n      </div>\n    </div>\n  )\n}\n\nfunction FileListBox({\n  items,\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement> & {\n  items: { name: string; size: number; progress: number | boolean }[]\n}) {\n  const [api, setApi] = React.useState<CarouselApi>()\n  const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n  const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n  const onSelect = React.useCallback((api: CarouselApi) => {\n    if (!api) {\n      return\n    }\n\n    setCanScrollPrev(api.canScrollPrev())\n    setCanScrollNext(api.canScrollNext())\n  }, [])\n\n  React.useEffect(() => {\n    if (!api) {\n      return\n    }\n\n    onSelect(api)\n    api.on(\"reInit\", onSelect)\n    api.on(\"select\", onSelect)\n\n    return () => {\n      api?.off(\"select\", onSelect)\n    }\n  }, [api, onSelect])\n\n  console.log(canScrollPrev, canScrollNext)\n\n  return (\n    <div className={cn(\"\", className)} {...props}>\n      <Carousel\n        setApi={setApi}\n        opts={{\n          align: \"start\",\n        }}\n        className={cn(\n          \"w-full\",\n          canScrollPrev &&\n            \"[mask-image:linear-gradient(to_right,transparent,white_8%)]\",\n          canScrollNext &&\n            \"[mask-image:linear-gradient(to_right,white_92%,transparent)]\",\n          canScrollPrev &&\n            canScrollNext &&\n            \"[mask-image:linear-gradient(to_right,transparent,white_8%,white_92%,transparent)]\"\n        )}\n      >\n        <CarouselContent className=\"ml-0 space-x-2\">\n          {items.map((item, index) => (\n            <FileCard key={index} item={item} />\n          ))}\n        </CarouselContent>\n        {canScrollPrev && (\n          <CarouselPrevious className=\"left-2 size-6 rounded-lg\" />\n        )}\n        {canScrollNext && (\n          <CarouselNext className=\"right-2 size-6 rounded-lg\" />\n        )}\n      </Carousel>\n    </div>\n  )\n}\n\nexport { Attachments, FileListBox, FileCard }\n",
      "type": "registry:ui",
      "target": "components/aoian-ui/attachments.tsx"
    }
  ]
}