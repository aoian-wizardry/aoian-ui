{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "attachments-uploadthing-upstash",
  "type": "registry:example",
  "registryDependencies": [
    "https://ui.aoian.chat/r/sender",
    "https://ui.aoian.chat/r/attachments",
    "button"
  ],
  "files": [
    {
      "path": "registry/examples/attachments-uploadthing-upstash.tsx",
      "content": "import * as React from \"react\"\nimport { generateReactHelpers } from \"@uploadthing/react\"\nimport { toast } from \"sonner\"\n\nimport {\n  Attachments,\n  FileListBox,\n  type AttachmentsProps,\n  type FileCardItem,\n} from \"@/components/aoian-ui/attachments/attachments\"\nimport {\n  Sender,\n  SenderButton,\n  SenderContent,\n  SenderOperation,\n  SenderOperationBar,\n  SenderOperationBarExtra,\n  SenderTextArea,\n} from \"@/components/aoian-ui/sender/sender\"\nimport { cn, generateUUID } from \"@/registry/lib/utils\"\nimport type { UploadRouter } from \"@/app/api/uploadthing/core\"\n\nconst { uploadFiles } = generateReactHelpers<UploadRouter>()\n\nconst maxFileCount = 6\n\nexport default function AttachmentsUploadthingUpstash() {\n  const [value, setValue] = React.useState(\"\")\n  const [isLoading, setIsLoading] = React.useState(false)\n  const [attachments, setAttachments] = React.useState<Array<FileCardItem>>([])\n  const [uploadQueue, setUploadQueue] = React.useState<Array<FileCardItem>>([])\n  const [isUploading, setIsUploading] = React.useState(false)\n\n  const fileItems = React.useMemo(() => {\n    return [...attachments, ...uploadQueue]\n  }, [attachments, uploadQueue])\n\n  const updateUploadProgress = (uid: string, progress: number) => {\n    setUploadQueue((prevQueue) =>\n      prevQueue.map((item) =>\n        item.uid === uid\n          ? { ...item, percent: progress > 100 ? 100 : progress }\n          : item\n      )\n    )\n  }\n\n  const onUpload = async (files: File[], uids: string[]) => {\n    setIsUploading(true)\n    try {\n      const res = await uploadFiles(\"imageUploader\", {\n        files,\n        input: uids,\n        onUploadProgress: ({ file, progress }) => {\n          const uid = uids[files.indexOf(file)]\n          console.log(\"uid:\", uid, progress)\n          updateUploadProgress(uid, progress)\n        },\n      })\n      // 处理上传完成后的逻辑\n      const completedItems: FileCardItem[] = res.map((item) => ({\n        uid: item.customId as string,\n        name: item.name,\n        size: item.size,\n        contentType: item.type,\n        percent: 100,\n        status: \"done\",\n        url: item.ufsUrl,\n      }))\n\n      setAttachments((prev) => [...prev, ...completedItems])\n      setUploadQueue((prev) => {\n        const completedUids = new Set(completedItems.map((item) => item.uid))\n        return prev.filter((item) => !completedUids.has(item.uid))\n      })\n    } catch (err) {\n      // toast.error(getErrorMessage(err))\n    } finally {\n      setIsUploading(false)\n    }\n  }\n\n  const handleFileChange = React.useCallback<\n    NonNullable<AttachmentsProps[\"onFileChange\"]>\n  >(\n    async (acceptedFiles, rejectedFiles) => {\n      if ((fileItems?.length ?? 0) + acceptedFiles.length > maxFileCount) {\n        toast.error(`Cannot upload more than ${maxFileCount} files`)\n        return\n      }\n      if (rejectedFiles.length > 0) {\n        rejectedFiles.forEach(({ file }) => {\n          toast.error(`File ${file.name} was rejected`)\n        })\n      }\n      let uids: string[] = []\n      const files = (acceptedFiles || []).map((file) => {\n        const uid = generateUUID()\n        uids.push(uid)\n        return Object.assign(file, { uid })\n      })\n      const newItems = files.map((file, index) => ({\n        uid: uids[index],\n        name: file.name,\n        size: file.size,\n        percent: 0,\n        contentType: file.type,\n        status: \"uploading\",\n      })) as FileCardItem[]\n      setUploadQueue([...uploadQueue, ...newItems])\n      await onUpload(files, uids)\n    },\n    [uploadQueue, attachments]\n  )\n\n  const handleDelete = (uid?: string) => {\n    setAttachments((prev) => prev.filter((item) => item.uid !== uid))\n  }\n\n  return (\n    <Sender\n      submitType=\"shiftEnter\"\n      placeholder=\"Press Shift + Enter to send message\"\n      loading={isLoading}\n      disabled={isUploading}\n      value={value}\n      onChange={(e) => {\n        setValue(e?.target?.value)\n      }}\n      onSubmit={() => {\n        setIsLoading(true)\n        setTimeout(() => {\n          toast.success(value)\n          setValue(\"\")\n          setIsLoading(false)\n        }, 3000)\n      }}\n    >\n      <SenderContent>\n        <FileListBox\n          items={fileItems}\n          onDelete={handleDelete}\n          className={cn(fileItems.length === 0 && \"-mt-2\")}\n        />\n        {fileItems.length > 0 && <div className=\"h-1\"></div>}\n        <SenderTextArea />\n        <SenderOperation>\n          <SenderOperationBarExtra></SenderOperationBarExtra>\n          <SenderOperationBar>\n            <Attachments\n              accept={{\n                \"image/*\": [],\n                \"application/pdf\": [],\n              }}\n              multiple\n              maxFileCount={maxFileCount}\n              onFileChange={handleFileChange}\n            />\n            <SenderButton />\n          </SenderOperationBar>\n        </SenderOperation>\n      </SenderContent>\n    </Sender>\n  )\n}\n",
      "type": "registry:example"
    }
  ]
}