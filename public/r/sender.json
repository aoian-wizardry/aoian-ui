{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "sender",
  "type": "registry:ui",
  "dependencies": [
    "react-textarea-autosize"
  ],
  "files": [
    {
      "path": "registry/aoian-ui/sender/sender.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { ArrowUp, Globe, Square } from \"lucide-react\"\nimport Textarea, { type TextareaAutosizeProps } from \"react-textarea-autosize\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Toggle } from \"@/components/ui/toggle\"\nimport type { SenderProps } from \"@/components/aoian-ui/sender/types\"\nimport { cn } from \"@/registry/lib/utils\"\n\nconst SenderContext = React.createContext<SenderProps | null>(null)\n\nfunction useSender() {\n  const context = React.useContext(SenderContext)\n  if (context === null) {\n    throw new Error(\"useSender must be used within a Sender.\")\n  }\n  return context\n}\n\nconst senderVariants = cva(\"mx-auto w-full max-w-3xl px-2 py-4\", {\n  variants: {},\n  defaultVariants: {},\n})\n\nfunction Sender({\n  onSubmit,\n  onChange,\n  onFocus,\n  loading,\n  onBlur,\n  onAbort,\n  onKeyDown,\n  value,\n  vertical = true,\n  readOnly,\n  disabled,\n  submitType = \"enter\",\n  placeholder,\n  className,\n  ...props\n}: SenderProps &\n  Omit<React.HTMLAttributes<HTMLDivElement>, \"onChange\"> &\n  VariantProps<typeof senderVariants>) {\n  const contextValue = React.useMemo<SenderProps>(\n    () => ({\n      placeholder,\n      submitType,\n      disabled,\n      readOnly,\n      value,\n      onKeyDown,\n      onAbort,\n      onBlur,\n      vertical,\n      loading,\n      onFocus,\n      onChange,\n      onSubmit,\n    }),\n    [\n      placeholder,\n      submitType,\n      disabled,\n      readOnly,\n      value,\n      onKeyDown,\n      onAbort,\n      onBlur,\n      vertical,\n      loading,\n      onFocus,\n      onChange,\n      onSubmit,\n    ]\n  )\n\n  return (\n    <SenderContext value={contextValue}>\n      <div {...props} className={cn(senderVariants(), className)}></div>\n    </SenderContext>\n  )\n}\n\nconst senderContentVariants = cva(\n  \"relative flex px-4 py-3 w-full gap-2 rounded-2xl border border-input bg-chat-muted\",\n  {\n    variants: {\n      vertical: {\n        true: \"flex-col\",\n        false: \"flex-row items-end\",\n      },\n    },\n    defaultVariants: {\n      vertical: true,\n    },\n  }\n)\n\nfunction SenderContent({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement> &\n  VariantProps<typeof senderContentVariants>) {\n  const { vertical } = useSender()\n  return (\n    <div\n      data-vertical={vertical}\n      className={cn(\n        \"group/sender-content\",\n        senderContentVariants({ vertical }),\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SenderTextArea({ className, ...props }: TextareaAutosizeProps) {\n  const {\n    value,\n    submitType,\n    onSubmit,\n    onKeyDown,\n    placeholder,\n    readOnly,\n    disabled,\n    onChange,\n    onFocus,\n    onBlur,\n  } = useSender()\n\n  const isCompositionRef = React.useRef(false)\n\n  const handleCompositionStart = () => (isCompositionRef.current = true)\n\n  const handleCompositionEnd = () => {\n    isCompositionRef.current = false\n  }\n\n  const handleKeyPress: React.KeyboardEventHandler<HTMLTextAreaElement> = (\n    e\n  ) => {\n    const canSubmit =\n      e.key === \"Enter\" &&\n      !isCompositionRef.current &&\n      value.trim().length !== 0\n\n    // Check for `submitType` to submit\n    switch (submitType) {\n      case \"enter\":\n        if (canSubmit && !e.shiftKey) {\n          e.preventDefault()\n          onSubmit()\n        }\n        break\n\n      case \"shiftEnter\":\n        if (canSubmit && e.shiftKey) {\n          e.preventDefault()\n          onSubmit()\n        }\n        break\n    }\n\n    if (onKeyDown) {\n      onKeyDown(e)\n    }\n  }\n\n  return (\n    <Textarea\n      name=\"sender\"\n      maxRows={5}\n      tabIndex={0}\n      onCompositionStart={handleCompositionStart}\n      onCompositionEnd={handleCompositionEnd}\n      placeholder={placeholder ?? \"Ask a question...\"}\n      spellCheck={false}\n      value={value}\n      readOnly={readOnly}\n      disabled={disabled}\n      className={cn(\n        \"min-h-12 w-full resize-none self-center border-0 bg-transparent text-sm placeholder:text-muted-foreground focus-visible:outline-none disabled:cursor-not-allowed disabled:opacity-50 group-data-[vertical=false]/sender-content:min-h-[22px]\",\n        className\n      )}\n      onChange={onChange}\n      onKeyDown={handleKeyPress}\n      onFocus={onFocus}\n      onBlur={onBlur}\n      {...props}\n    />\n  )\n}\n\nfunction SenderOperation({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\n        \"flex justify-between gap-2 group-data-[vertical=false]/sender-content:self-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SenderOperationBar({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return <div className={cn(\"inline-flex gap-2\", className)} {...props} />\n}\n\nfunction SenderOperationBarExtra({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return <div className={cn(\"inline-flex gap-2\", className)} {...props} />\n}\n\nfunction SenderButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { loading, value, onAbort, onSubmit, disabled } = useSender()\n  return (\n    <Button\n      size={\"icon\"}\n      variant={\"outline\"}\n      className={cn(\"rounded-full\", loading && \"animate-pulse\", className)}\n      disabled={(value?.length === 0 && !loading) || disabled}\n      onClick={loading ? onAbort : onSubmit}\n      {...props}\n    >\n      {loading ? <Square size={20} /> : <ArrowUp size={20} />}\n    </Button>\n  )\n}\n\nfunction SenderSearchToggle({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof Toggle>) {\n  return (\n    <Toggle\n      aria-label=\"Toggle search mode\"\n      variant=\"outline\"\n      className={cn(\n        \"gap-1 border border-input bg-background px-3 text-muted-foreground\",\n        \"data-[state=on]:bg-chat-accent-blue\",\n        \"data-[state=on]:text-chat-accent-blue-foreground\",\n        \"data-[state=on]:border-chat-accent-blue-border\",\n        \"rounded-full hover:bg-accent hover:text-accent-foreground\",\n        className\n      )}\n      {...props}\n    >\n      <Globe className=\"size-4\" />\n      <span className=\"text-xs\">{children}</span>\n    </Toggle>\n  )\n}\n\nexport {\n  Sender,\n  SenderContent,\n  SenderTextArea,\n  SenderOperation,\n  SenderOperationBar,\n  SenderOperationBarExtra,\n  SenderButton,\n  SenderSearchToggle,\n  useSender,\n}\n",
      "type": "registry:ui",
      "target": "components/aoian-ui/sender.tsx"
    }
  ]
}